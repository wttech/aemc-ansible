# TODO https://experienceleague.adobe.com/docs/experience-manager-65/deploying/introduction/technical-requirements.html
- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled

- name: Create system group
  group:
    name: "{{ aem_system_group }}"
    state: present

- name: Create system user
  user:
    name: "{{ aem_system_user }}"
    groups: "{{ aem_system_group }}"
    append: yes
    system: yes
    state: present

- name: Create system script
  template:
    src: aem.sh
    dest: "{{ aem_system_script }}"
    mode: a+x

- name: Create system service
  template:
    src: aem.service
    dest: "/etc/systemd/system/{{ aem_system_service }}.service"
    mode: "0644"
  register: service_template

- name: Enable system service
  systemd:
    name: "{{ aem_system_service }}"
    enabled: yes
    daemon_reload: yes
  when: service_template.changed

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ aem_system_user }}"
    group: "{{ aem_system_group }}"
  with_items: "{{ aem_dirs }}"

- name: Find library files on S3
  aws_s3:
    mode: list
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ aem_lib_s3_bucket }}"
    prefix: "{{ aem_lib_s3_folder }}/"
    marker: "{{ aem_lib_s3_folder  }}/"
  register: aem_lib_s3_items

- name: Download library files from S3
  aws_s3:
    mode: get
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ aem_lib_s3_bucket }}"
    object: "{{ item }}"
    dest: "{{ aem_lib_dir }}/{{ item|basename }}"
    # overwrite: never
  with_items: "{{ aem_lib_s3_items.s3_keys }}"

- name: Create config file
  template:
    src: aem.yml
    dest: "{{ aem_config_file }}"
    owner: "{{ aem_system_user }}"
    group: "{{ aem_system_group }}"
#  notify:
#    - Restart instance(s)

- name: Create instance(s)
  wttech.aem.instance:
    command: create
  become: true
  become_user: "{{ aem_system_user }}"

- name: Start instance(s)
  wttech.aem.instance:
    command: start
  become: true
  become_user: "{{ aem_system_user }}"
  register: instance_start

#- name: flush handlers
#  meta: flush_handlers
#
#- name: Await instance(s)
#  wttech.aem.instance:
#    command: await
#  become: true
#  become_user: "{{ aem_system_user }}"

#- name: Read config file
#  ansible.builtin.shell: "cat {{ aem_config_file }}"
#  no_log: true
#  changed_when: false
#  register: res
#
#- name: Parse config file
#  set_fact:
#    aem: "{{ res.stdout | from_yaml }}"
#
#- name: Enable CRX DE
#  wttech.aem.osgi_config:
#    command: save
#    pid: org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
#    props:
#      alias: /crx/server
#  become: true
#  become_user: "{{ aem_system_user }}"
#
#- name: Configure replication agent for publishing content
#  wttech.aem.repl_agent:
#    command: setup
#    instance_id: local_author
#    location: author
#    name: publish
#    props:
#      enabled: true
#      transportUri: "{{ aem.instance.config.local_publish.http_url }}/bin/receive?sling:authRequestLogin=1"
#      transportUser: "{{ aem.instance.config.local_publish.user }}"
#      transportPassword: "{{ aem.instance.config.local_publish.password }}"
#      userId: "{{ aem.instance.config.local_publish.user }}"
#  become: true
#  become_user: "{{ aem_system_user }}"
#
#- name: Configure replication agent for flushing dispatcher cache
#  wttech.aem.repl_agent:
#    command: setup
#    instance_id: local_publish
#    location: publish
#    name: flush
#    props:
#      enabled: true
#      transportUri: "{{ aem_dispatcher_http_url }}/dispatcher/invalidate.cache"
#      protocolHTTPHeaders:
#        - "CQ-Action: {action}"
#        - "CQ-Handle: {path}"
#        - "CQ-Path: {path}"
#        - "Host: publish"
#  become: true
#  become_user: "{{ aem_system_user }}"
