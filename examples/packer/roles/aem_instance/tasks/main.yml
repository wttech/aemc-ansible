- name: Ensure library dir
  file:
    path: "{{ aem_lib_dir }}"
    state: directory

- name: Find library files on S3
  aws_s3:
    mode: list
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ aem_lib_s3_bucket }}"
    prefix: "{{ aem_lib_s3_folder }}/"
    marker: "{{ aem_lib_s3_folder  }}/"
  register: aem_lib_s3_items

- name: Download library files from S3
  aws_s3:
    mode: get
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ aem_lib_s3_bucket }}"
    object: "{{ item }}"
    dest: "{{ aem_lib_dir }}/{{ item|basename }}"
    # overwrite: never
  with_items: "{{ aem_lib_s3_items.s3_keys }}"

- name: Create configuration file
  template:
    src: aem.yml
    dest: "{{ aem_config_file }}"
  notify:
    - Restart AEM service

- name: Create system script
  template:
    src: aem.sh
    dest: "{{ aem_system_script }}"
    mode: a+x
  notify:
    - Restart AEM service

- name: Create system group
  group:
    name: "{{ aem_system_group }}"
    state: present

- name: Create system user
  user:
    name: "{{ aem_system_user }}"
    groups: "{{ aem_system_group }}"
    append: yes
    system: yes
    state: present

- name: Create system service
  template:
    src: aem.service
    dest: "/etc/systemd/system/{{ aem_system_service }}.service"
    mode: "0644"
  register: service_template
  notify:
    - Restart AEM service

- name: Enable system service
  systemd:
    name: "{{ aem_system_service }}"
    enabled: yes
    daemon_reload: yes
  when: service_template.changed

- block:
    - name: Start system service
      service:
        name: "{{ aem_system_service }}"
        state: started
  rescue:
    - name: Check failed system service
      shell: "journalctl -u {{ aem_system_service }} -b --no-pager -n 1000"
      register: res
    - name: Print failed system service
      debug:
        msg: "{{ res.stdout }}"
    - name: Re-raise failed system service error
      fail:
        msg: "{{ ansible_failed_result }}"

- name: flush handlers
  meta: flush_handlers

- name: Ensure up instance(s)
  wttech.aem.instance:
    command: up

- name: Enable CRX DE
  wttech.aem.osgi_config:
    command: save
    pid: org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
    props:
      alias: /crx/server

- name: Configure replication agent for publishing content
  wttech.aem.repl_agent:
    command: setup
    instance_id: local_author
    location: author
    name: publish
    props:
      enabled: true
      transportUri: "{{ aem.instance.config.local_publish.http_url }}/bin/receive?sling:authRequestLogin=1"
      transportUser: "{{ aem.instance.config.local_publish.user }}"
      transportPassword: "{{ aem.instance.config.local_publish.password }}"
      userId: "{{ aem.instance.config.local_publish.user }}"

- name: Configure replication agent for flushing dispatcher cache
  wttech.aem.repl_agent:
    command: setup
    instance_id: local_publish
    location: publish
    name: flush
    props:
      enabled: true
      transportUri: "{{ aem_dispatcher_http_url }}/dispatcher/invalidate.cache"
      protocolHTTPHeaders:
        - "CQ-Action: {action}"
        - "CQ-Handle: {path}"
        - "CQ-Path: {path}"
        - "Host: publish"
